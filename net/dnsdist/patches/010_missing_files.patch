--- /dev/null
+++ b/dnsdist-rust-bridge-actions-generated-body.hh
@@ -0,0 +1,221 @@
+// !! This file has been generated by dnsdist-settings-generator.py, do not edit by hand!!
+std::shared_ptr<DNSActionWrapper> getAllowAction(const AllowActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getAllowAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getDelayAction(const DelayActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getDelayAction(config.msec);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getDropAction(const DropActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getDropAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetEDNSOptionAction(const SetEDNSOptionActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetEDNSOptionAction(config.code, std::string(config.data));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getERCodeAction(const ERCodeActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getERCodeAction(dnsdist::configuration::yaml::strToRCode("config", "rcode", config.rcode), convertResponseConfig(config.vars));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getHTTPStatusAction(const HTTPStatusActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getHTTPStatusAction(config.status, PacketBuffer(config.body.data(), config.body.data() + config.body.size()), std::string(config.content_type), convertResponseConfig(config.vars));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getLogAction(const LogActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getLogAction(std::string(config.file_name), config.binary, config.append, config.buffered, config.verbose_only, config.include_timestamp);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getLuaFFIPerThreadAction(const LuaFFIPerThreadActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getLuaFFIPerThreadAction(std::string(config.code));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getNegativeAndSOAAction(const NegativeAndSOAActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getNegativeAndSOAAction(config.nxd, DNSName(std::string(config.zone)), config.ttl, DNSName(std::string(config.mname)), DNSName(std::string(config.rname)), convertSOAParams(config.soa_parameters), config.soa_in_authority, convertResponseConfig(config.vars));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getNoneAction(const NoneActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getNoneAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getPoolAction(const PoolActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getPoolAction(std::string(config.pool_name), config.stop_processing);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getQPSAction(const QPSActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getQPSAction(config.limit);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getQPSPoolAction(const QPSPoolActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getQPSPoolAction(config.limit, std::string(config.pool_name), config.stop_processing);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getRCodeAction(const RCodeActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getRCodeAction(dnsdist::configuration::yaml::strToRCode("config", "rcode", config.rcode), convertResponseConfig(config.vars));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetAdditionalProxyProtocolValueAction(const SetAdditionalProxyProtocolValueActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetAdditionalProxyProtocolValueAction(config.proxy_type, std::string(config.value));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetDisableECSAction(const SetDisableECSActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetDisableECSAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetDisableValidationAction(const SetDisableValidationActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetDisableValidationAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetECSAction(const SetECSActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetECSAction(std::string(config.ipv4), std::string(config.ipv6));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetECSOverrideAction(const SetECSOverrideActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetECSOverrideAction(config.override_existing);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetECSPrefixLengthAction(const SetECSPrefixLengthActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetECSPrefixLengthAction(config.ipv4, config.ipv6);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetExtendedDNSErrorAction(const SetExtendedDNSErrorActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetExtendedDNSErrorAction(config.info_code, std::string(config.extra_text));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetMacAddrAction(const SetMacAddrActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetMacAddrAction(config.code);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetMaxReturnedTTLAction(const SetMaxReturnedTTLActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetMaxReturnedTTLAction(config.max);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetNoRecurseAction(const SetNoRecurseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetNoRecurseAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetSkipCacheAction(const SetSkipCacheActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetSkipCacheAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetTagAction(const SetTagActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetTagAction(std::string(config.tag), std::string(config.value));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSetTempFailureCacheTTLAction(const SetTempFailureCacheTTLActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetTempFailureCacheTTLAction(config.ttl);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSNMPTrapAction(const SNMPTrapActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSNMPTrapAction(std::string(config.reason));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getSpoofSVCAction(const SpoofSVCActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSpoofSVCAction(convertSVCRecordParameters(config.parameters), convertResponseConfig(config.vars));
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getTCAction(const TCActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getTCAction();
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSActionWrapper> getTeeAction(const TeeActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getTeeAction(ComboAddress(std::string(config.rca)), ComboAddress(std::string(config.lca)), config.add_ecs, config.add_proxy_protocol);
+  return newDNSActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getAllowResponseAction(const AllowResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getAllowResponseAction();
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getDelayResponseAction(const DelayResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getDelayResponseAction(config.msec);
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getDropResponseAction(const DropResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getDropResponseAction();
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getLogResponseAction(const LogResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getLogResponseAction(std::string(config.file_name), config.append, config.buffered, config.verbose_only, config.include_timestamp);
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getLuaFFIPerThreadResponseAction(const LuaFFIPerThreadResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getLuaFFIPerThreadResponseAction(std::string(config.code));
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetEDNSOptionResponseAction(const SetEDNSOptionResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetEDNSOptionResponseAction(config.code, std::string(config.data));
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetExtendedDNSErrorResponseAction(const SetExtendedDNSErrorResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetExtendedDNSErrorResponseAction(config.info_code, std::string(config.extra_text));
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetMaxReturnedTTLResponseAction(const SetMaxReturnedTTLResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetMaxReturnedTTLResponseAction(config.max);
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetReducedTTLResponseAction(const SetReducedTTLResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetReducedTTLResponseAction(config.percentage);
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetSkipCacheResponseAction(const SetSkipCacheResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetSkipCacheResponseAction();
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSetTagResponseAction(const SetTagResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSetTagResponseAction(std::string(config.tag), std::string(config.value));
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getSNMPTrapResponseAction(const SNMPTrapResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getSNMPTrapResponseAction(std::string(config.reason));
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
+std::shared_ptr<DNSResponseActionWrapper> getTCResponseAction(const TCResponseActionConfiguration& config)
+{
+  auto action = dnsdist::actions::getTCResponseAction();
+  return newDNSResponseActionWrapper(std::move(action), config.name);
+}
--- /dev/null
+++ b/dnsdist-rust-bridge-actions-generated.hh
@@ -0,0 +1,129 @@
+// !! This file has been generated by dnsdist-settings-generator.py, do not edit by hand!!
+struct AllowActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getAllowAction(const AllowActionConfiguration& config);
+struct ContinueActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getContinueAction(const ContinueActionConfiguration& config);
+struct DelayActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getDelayAction(const DelayActionConfiguration& config);
+struct DnstapLogActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getDnstapLogAction(const DnstapLogActionConfiguration& config);
+struct DropActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getDropAction(const DropActionConfiguration& config);
+struct SetEDNSOptionActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetEDNSOptionAction(const SetEDNSOptionActionConfiguration& config);
+struct ERCodeActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getERCodeAction(const ERCodeActionConfiguration& config);
+struct HTTPStatusActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getHTTPStatusAction(const HTTPStatusActionConfiguration& config);
+struct KeyValueStoreLookupActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getKeyValueStoreLookupAction(const KeyValueStoreLookupActionConfiguration& config);
+struct KeyValueStoreRangeLookupActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getKeyValueStoreRangeLookupAction(const KeyValueStoreRangeLookupActionConfiguration& config);
+struct LogActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getLogAction(const LogActionConfiguration& config);
+struct LuaActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getLuaAction(const LuaActionConfiguration& config);
+struct LuaFFIActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getLuaFFIAction(const LuaFFIActionConfiguration& config);
+struct LuaFFIPerThreadActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getLuaFFIPerThreadAction(const LuaFFIPerThreadActionConfiguration& config);
+struct NegativeAndSOAActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getNegativeAndSOAAction(const NegativeAndSOAActionConfiguration& config);
+struct NoneActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getNoneAction(const NoneActionConfiguration& config);
+struct PoolActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getPoolAction(const PoolActionConfiguration& config);
+struct QPSActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getQPSAction(const QPSActionConfiguration& config);
+struct QPSPoolActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getQPSPoolAction(const QPSPoolActionConfiguration& config);
+struct RCodeActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getRCodeAction(const RCodeActionConfiguration& config);
+struct RemoteLogActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getRemoteLogAction(const RemoteLogActionConfiguration& config);
+struct SetAdditionalProxyProtocolValueActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetAdditionalProxyProtocolValueAction(const SetAdditionalProxyProtocolValueActionConfiguration& config);
+struct SetDisableECSActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetDisableECSAction(const SetDisableECSActionConfiguration& config);
+struct SetDisableValidationActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetDisableValidationAction(const SetDisableValidationActionConfiguration& config);
+struct SetECSActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetECSAction(const SetECSActionConfiguration& config);
+struct SetECSOverrideActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetECSOverrideAction(const SetECSOverrideActionConfiguration& config);
+struct SetECSPrefixLengthActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetECSPrefixLengthAction(const SetECSPrefixLengthActionConfiguration& config);
+struct SetExtendedDNSErrorActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetExtendedDNSErrorAction(const SetExtendedDNSErrorActionConfiguration& config);
+struct SetMacAddrActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetMacAddrAction(const SetMacAddrActionConfiguration& config);
+struct SetMaxReturnedTTLActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetMaxReturnedTTLAction(const SetMaxReturnedTTLActionConfiguration& config);
+struct SetNoRecurseActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetNoRecurseAction(const SetNoRecurseActionConfiguration& config);
+struct SetProxyProtocolValuesActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetProxyProtocolValuesAction(const SetProxyProtocolValuesActionConfiguration& config);
+struct SetSkipCacheActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetSkipCacheAction(const SetSkipCacheActionConfiguration& config);
+struct SetTagActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetTagAction(const SetTagActionConfiguration& config);
+struct SetTempFailureCacheTTLActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSetTempFailureCacheTTLAction(const SetTempFailureCacheTTLActionConfiguration& config);
+struct SNMPTrapActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSNMPTrapAction(const SNMPTrapActionConfiguration& config);
+struct SpoofActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSpoofAction(const SpoofActionConfiguration& config);
+struct SpoofCNAMEActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSpoofCNAMEAction(const SpoofCNAMEActionConfiguration& config);
+struct SpoofPacketActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSpoofPacketAction(const SpoofPacketActionConfiguration& config);
+struct SpoofRawActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSpoofRawAction(const SpoofRawActionConfiguration& config);
+struct SpoofSVCActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getSpoofSVCAction(const SpoofSVCActionConfiguration& config);
+struct TCActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getTCAction(const TCActionConfiguration& config);
+struct TeeActionConfiguration;
+std::shared_ptr<DNSActionWrapper> getTeeAction(const TeeActionConfiguration& config);
+struct AllowResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getAllowResponseAction(const AllowResponseActionConfiguration& config);
+struct ClearRecordTypesResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getClearRecordTypesResponseAction(const ClearRecordTypesResponseActionConfiguration& config);
+struct DelayResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getDelayResponseAction(const DelayResponseActionConfiguration& config);
+struct DnstapLogResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getDnstapLogResponseAction(const DnstapLogResponseActionConfiguration& config);
+struct DropResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getDropResponseAction(const DropResponseActionConfiguration& config);
+struct LimitTTLResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getLimitTTLResponseAction(const LimitTTLResponseActionConfiguration& config);
+struct LogResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getLogResponseAction(const LogResponseActionConfiguration& config);
+struct LuaResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getLuaResponseAction(const LuaResponseActionConfiguration& config);
+struct LuaFFIResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getLuaFFIResponseAction(const LuaFFIResponseActionConfiguration& config);
+struct LuaFFIPerThreadResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getLuaFFIPerThreadResponseAction(const LuaFFIPerThreadResponseActionConfiguration& config);
+struct RemoteLogResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getRemoteLogResponseAction(const RemoteLogResponseActionConfiguration& config);
+struct SetEDNSOptionResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetEDNSOptionResponseAction(const SetEDNSOptionResponseActionConfiguration& config);
+struct SetExtendedDNSErrorResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetExtendedDNSErrorResponseAction(const SetExtendedDNSErrorResponseActionConfiguration& config);
+struct SetMaxReturnedTTLResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetMaxReturnedTTLResponseAction(const SetMaxReturnedTTLResponseActionConfiguration& config);
+struct SetMaxTTLResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetMaxTTLResponseAction(const SetMaxTTLResponseActionConfiguration& config);
+struct SetMinTTLResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetMinTTLResponseAction(const SetMinTTLResponseActionConfiguration& config);
+struct SetReducedTTLResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetReducedTTLResponseAction(const SetReducedTTLResponseActionConfiguration& config);
+struct SetSkipCacheResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetSkipCacheResponseAction(const SetSkipCacheResponseActionConfiguration& config);
+struct SetTagResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSetTagResponseAction(const SetTagResponseActionConfiguration& config);
+struct SNMPTrapResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getSNMPTrapResponseAction(const SNMPTrapResponseActionConfiguration& config);
+struct TCResponseActionConfiguration;
+std::shared_ptr<DNSResponseActionWrapper> getTCResponseAction(const TCResponseActionConfiguration& config);
--- /dev/null
+++ b/dnsdist-rust-bridge-selectors-generated-body.hh
@@ -0,0 +1,161 @@
+// !! This file has been generated by dnsdist-settings-generator.py, do not edit by hand!!
+std::shared_ptr<DNSSelector> getAllSelector(const AllSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getAllSelector();
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getDNSSECSelector(const DNSSECSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getDNSSECSelector();
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getDSTPortSelector(const DSTPortSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getDSTPortSelector(config.port);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getEDNSOptionSelector(const EDNSOptionSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getEDNSOptionSelector(config.option_code);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getEDNSVersionSelector(const EDNSVersionSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getEDNSVersionSelector(config.version);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getERCodeSelector(const ERCodeSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getERCodeSelector(dnsdist::configuration::yaml::strToRCode("config", "rcode", config.rcode));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getHTTPHeaderSelector(const HTTPHeaderSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getHTTPHeaderSelector(std::string(config.header), std::string(config.expression));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getHTTPPathSelector(const HTTPPathSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getHTTPPathSelector(std::string(config.path));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getHTTPPathRegexSelector(const HTTPPathRegexSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getHTTPPathRegexSelector(std::string(config.expression));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getLuaFFIPerThreadSelector(const LuaFFIPerThreadSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getLuaFFIPerThreadSelector(std::string(config.code));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getMaxQPSSelector(const MaxQPSSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getMaxQPSSelector(config.qps, config.burst);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getMaxQPSIPSelector(const MaxQPSIPSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getMaxQPSIPSelector(config.qps, config.ipv4_mask, config.ipv6_mask, config.burst, config.expiration, config.cleanup_delay, config.scan_fraction, config.shards);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getOpcodeSelector(const OpcodeSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getOpcodeSelector(config.code);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getPayloadSizeSelector(const PayloadSizeSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getPayloadSizeSelector(std::string(config.comparison), config.size);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getPoolAvailableSelector(const PoolAvailableSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getPoolAvailableSelector(std::string(config.pool));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getPoolOutstandingSelector(const PoolOutstandingSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getPoolOutstandingSelector(std::string(config.pool), config.max_outstanding);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getProbaSelector(const ProbaSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getProbaSelector(config.probability);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getProxyProtocolValueSelector(const ProxyProtocolValueSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getProxyProtocolValueSelector(config.option_type, std::string(config.option_value));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getQClassSelector(const QClassSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getQClassSelector(std::string(config.qclass), config.numeric_value);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getQNameLabelsCountSelector(const QNameLabelsCountSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getQNameLabelsCountSelector(config.min_labels_count, config.max_labels_count);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getQNameWireLengthSelector(const QNameWireLengthSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getQNameWireLengthSelector(config.min, config.max);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getQTypeSelector(const QTypeSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getQTypeSelector(std::string(config.qtype), config.numeric_value);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRCodeSelector(const RCodeSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRCodeSelector(dnsdist::configuration::yaml::strToRCode("config", "rcode", config.rcode));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRDSelector(const RDSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRDSelector();
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRE2Selector(const RE2SelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRE2Selector(std::string(config.expression));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRecordsCountSelector(const RecordsCountSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRecordsCountSelector(config.section, config.minimum, config.maximum);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRecordsTypeCountSelector(const RecordsTypeCountSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRecordsTypeCountSelector(config.section, config.record_type, config.minimum, config.maximum);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getRegexSelector(const RegexSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getRegexSelector(std::string(config.expression));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getSNISelector(const SNISelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getSNISelector(std::string(config.server_name));
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getTagSelector(const TagSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getTagSelector(std::string(config.tag), std::string(config.value), config.empty_as_wildcard);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getTCPSelector(const TCPSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getTCPSelector(config.tcp);
+  return newDNSSelector(std::move(selector), config.name);
+}
+std::shared_ptr<DNSSelector> getTrailingDataSelector(const TrailingDataSelectorConfiguration& config)
+{
+  auto selector = dnsdist::selectors::getTrailingDataSelector();
+  return newDNSSelector(std::move(selector), config.name);
+}
--- /dev/null
+++ b/dnsdist-rust-bridge-selectors-generated.hh
@@ -0,0 +1,89 @@
+// !! This file has been generated by dnsdist-settings-generator.py, do not edit by hand!!
+struct AllSelectorConfiguration;
+std::shared_ptr<DNSSelector> getAllSelector(const AllSelectorConfiguration& config);
+struct AndSelectorConfiguration;
+std::shared_ptr<DNSSelector> getAndSelector(const AndSelectorConfiguration& config);
+struct ByNameSelectorConfiguration;
+std::shared_ptr<DNSSelector> getByNameSelector(const ByNameSelectorConfiguration& config);
+struct DNSSECSelectorConfiguration;
+std::shared_ptr<DNSSelector> getDNSSECSelector(const DNSSECSelectorConfiguration& config);
+struct DSTPortSelectorConfiguration;
+std::shared_ptr<DNSSelector> getDSTPortSelector(const DSTPortSelectorConfiguration& config);
+struct EDNSOptionSelectorConfiguration;
+std::shared_ptr<DNSSelector> getEDNSOptionSelector(const EDNSOptionSelectorConfiguration& config);
+struct EDNSVersionSelectorConfiguration;
+std::shared_ptr<DNSSelector> getEDNSVersionSelector(const EDNSVersionSelectorConfiguration& config);
+struct ERCodeSelectorConfiguration;
+std::shared_ptr<DNSSelector> getERCodeSelector(const ERCodeSelectorConfiguration& config);
+struct HTTPHeaderSelectorConfiguration;
+std::shared_ptr<DNSSelector> getHTTPHeaderSelector(const HTTPHeaderSelectorConfiguration& config);
+struct HTTPPathSelectorConfiguration;
+std::shared_ptr<DNSSelector> getHTTPPathSelector(const HTTPPathSelectorConfiguration& config);
+struct HTTPPathRegexSelectorConfiguration;
+std::shared_ptr<DNSSelector> getHTTPPathRegexSelector(const HTTPPathRegexSelectorConfiguration& config);
+struct KeyValueStoreLookupSelectorConfiguration;
+std::shared_ptr<DNSSelector> getKeyValueStoreLookupSelector(const KeyValueStoreLookupSelectorConfiguration& config);
+struct KeyValueStoreRangeLookupSelectorConfiguration;
+std::shared_ptr<DNSSelector> getKeyValueStoreRangeLookupSelector(const KeyValueStoreRangeLookupSelectorConfiguration& config);
+struct LuaSelectorConfiguration;
+std::shared_ptr<DNSSelector> getLuaSelector(const LuaSelectorConfiguration& config);
+struct LuaFFISelectorConfiguration;
+std::shared_ptr<DNSSelector> getLuaFFISelector(const LuaFFISelectorConfiguration& config);
+struct LuaFFIPerThreadSelectorConfiguration;
+std::shared_ptr<DNSSelector> getLuaFFIPerThreadSelector(const LuaFFIPerThreadSelectorConfiguration& config);
+struct MaxQPSSelectorConfiguration;
+std::shared_ptr<DNSSelector> getMaxQPSSelector(const MaxQPSSelectorConfiguration& config);
+struct MaxQPSIPSelectorConfiguration;
+std::shared_ptr<DNSSelector> getMaxQPSIPSelector(const MaxQPSIPSelectorConfiguration& config);
+struct NetmaskGroupSelectorConfiguration;
+std::shared_ptr<DNSSelector> getNetmaskGroupSelector(const NetmaskGroupSelectorConfiguration& config);
+struct NotSelectorConfiguration;
+std::shared_ptr<DNSSelector> getNotSelector(const NotSelectorConfiguration& config);
+struct OpcodeSelectorConfiguration;
+std::shared_ptr<DNSSelector> getOpcodeSelector(const OpcodeSelectorConfiguration& config);
+struct OrSelectorConfiguration;
+std::shared_ptr<DNSSelector> getOrSelector(const OrSelectorConfiguration& config);
+struct PayloadSizeSelectorConfiguration;
+std::shared_ptr<DNSSelector> getPayloadSizeSelector(const PayloadSizeSelectorConfiguration& config);
+struct PoolAvailableSelectorConfiguration;
+std::shared_ptr<DNSSelector> getPoolAvailableSelector(const PoolAvailableSelectorConfiguration& config);
+struct PoolOutstandingSelectorConfiguration;
+std::shared_ptr<DNSSelector> getPoolOutstandingSelector(const PoolOutstandingSelectorConfiguration& config);
+struct ProbaSelectorConfiguration;
+std::shared_ptr<DNSSelector> getProbaSelector(const ProbaSelectorConfiguration& config);
+struct ProxyProtocolValueSelectorConfiguration;
+std::shared_ptr<DNSSelector> getProxyProtocolValueSelector(const ProxyProtocolValueSelectorConfiguration& config);
+struct QClassSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQClassSelector(const QClassSelectorConfiguration& config);
+struct QNameSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQNameSelector(const QNameSelectorConfiguration& config);
+struct QNameLabelsCountSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQNameLabelsCountSelector(const QNameLabelsCountSelectorConfiguration& config);
+struct QNameSetSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQNameSetSelector(const QNameSetSelectorConfiguration& config);
+struct QNameSuffixSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQNameSuffixSelector(const QNameSuffixSelectorConfiguration& config);
+struct QNameWireLengthSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQNameWireLengthSelector(const QNameWireLengthSelectorConfiguration& config);
+struct QTypeSelectorConfiguration;
+std::shared_ptr<DNSSelector> getQTypeSelector(const QTypeSelectorConfiguration& config);
+struct RCodeSelectorConfiguration;
+std::shared_ptr<DNSSelector> getRCodeSelector(const RCodeSelectorConfiguration& config);
+struct RDSelectorConfiguration;
+std::shared_ptr<DNSSelector> getRDSelector(const RDSelectorConfiguration& config);
+struct RE2SelectorConfiguration;
+std::shared_ptr<DNSSelector> getRE2Selector(const RE2SelectorConfiguration& config);
+struct RecordsCountSelectorConfiguration;
+std::shared_ptr<DNSSelector> getRecordsCountSelector(const RecordsCountSelectorConfiguration& config);
+struct RecordsTypeCountSelectorConfiguration;
+std::shared_ptr<DNSSelector> getRecordsTypeCountSelector(const RecordsTypeCountSelectorConfiguration& config);
+struct RegexSelectorConfiguration;
+std::shared_ptr<DNSSelector> getRegexSelector(const RegexSelectorConfiguration& config);
+struct SNISelectorConfiguration;
+std::shared_ptr<DNSSelector> getSNISelector(const SNISelectorConfiguration& config);
+struct TagSelectorConfiguration;
+std::shared_ptr<DNSSelector> getTagSelector(const TagSelectorConfiguration& config);
+struct TCPSelectorConfiguration;
+std::shared_ptr<DNSSelector> getTCPSelector(const TCPSelectorConfiguration& config);
+struct TrailingDataSelectorConfiguration;
+std::shared_ptr<DNSSelector> getTrailingDataSelector(const TrailingDataSelectorConfiguration& config);
--- /dev/null
+++ b/dnsdist-configuration-yaml-items-generated.cc
@@ -0,0 +1,256 @@
+// !! This file has been generated by dnsdist-settings-generator.py, do not edit by hand!!
+// START INCLUDE dnsdist-configuration-yaml-items-pre-in.cc
+/*
+ * This file is part of PowerDNS or dnsdist.
+ * Copyright -- PowerDNS.COM B.V. and its contributors
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * In addition, for the avoidance of any doubt, permission is granted to
+ * link this program with OpenSSL and to (re)distribute the binaries
+ * produced as the result of such linking.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "dnsdist-configuration.hh"
+#include "dnsdist-configuration-yaml.hh"
+// END INCLUDE dnsdist-configuration-yaml-items-pre-in.cc
+#if defined(HAVE_YAML_CONFIGURATION)
+#include "rust/cxx.h"
+#include "rust/lib.rs.h"
+#include "dnsdist-configuration-yaml-internal.hh"
+
+namespace dnsdist::configuration::yaml
+{
+void convertRuntimeFlatSettingsFromRust(const dnsdist::rust::settings::GlobalConfiguration& yamlConfig, dnsdist::configuration::RuntimeConfiguration& config)
+{
+  if (config.d_consoleOutputMsgMaxSize == 10000000) {
+    config.d_consoleOutputMsgMaxSize = yamlConfig.console.maximum_output_size;
+  }
+  if (config.d_logConsoleConnections == true) {
+    config.d_logConsoleConnections = yamlConfig.console.log_connections;
+  }
+  if (config.d_ecsOverride == false) {
+    config.d_ecsOverride = yamlConfig.edns_client_subnet.override_existing;
+  }
+  if (config.d_ECSSourcePrefixV4 == 32) {
+    config.d_ECSSourcePrefixV4 = yamlConfig.edns_client_subnet.source_prefix_v4;
+  }
+  if (config.d_ECSSourcePrefixV6 == 56) {
+    config.d_ECSSourcePrefixV6 = yamlConfig.edns_client_subnet.source_prefix_v6;
+  }
+  if (config.d_dynBlocksPurgeInterval == 60) {
+    config.d_dynBlocksPurgeInterval = yamlConfig.dynamic_rules_settings.purge_interval;
+  }
+  if (config.d_tcpRecvTimeout == 2) {
+    config.d_tcpRecvTimeout = yamlConfig.tuning.tcp.receive_timeout;
+  }
+  if (config.d_tcpSendTimeout == 2) {
+    config.d_tcpSendTimeout = yamlConfig.tuning.tcp.send_timeout;
+  }
+  if (config.d_maxTCPQueriesPerConn == 0) {
+    config.d_maxTCPQueriesPerConn = yamlConfig.tuning.tcp.max_queries_per_connection;
+  }
+  if (config.d_maxTCPConnectionDuration == 0) {
+    config.d_maxTCPConnectionDuration = yamlConfig.tuning.tcp.max_connection_duration;
+  }
+  if (config.d_tlsSessionCacheCleanupDelay == 60) {
+    config.d_tlsSessionCacheCleanupDelay = yamlConfig.tuning.tls.outgoing_tickets_cache_cleanup_delay;
+  }
+  if (config.d_tlsSessionCacheSessionValidity == 600) {
+    config.d_tlsSessionCacheSessionValidity = yamlConfig.tuning.tls.outgoing_tickets_cache_validity;
+  }
+  if (config.d_tlsSessionCacheMaxSessionsPerBackend == 20) {
+    config.d_tlsSessionCacheMaxSessionsPerBackend = yamlConfig.tuning.tls.max_outgoing_tickets_per_backend;
+  }
+  if (config.d_staleCacheEntriesTTL == 0) {
+    config.d_staleCacheEntriesTTL = yamlConfig.cache_settings.stale_entries_ttl;
+  }
+  if (config.d_cacheCleaningDelay == 60) {
+    config.d_cacheCleaningDelay = yamlConfig.cache_settings.cleaning_delay;
+  }
+  if (config.d_cacheCleaningPercentage == 100) {
+    config.d_cacheCleaningPercentage = yamlConfig.cache_settings.cleaning_percentage;
+  }
+  if (config.d_secPollInterval == 3600) {
+    config.d_secPollInterval = yamlConfig.security_polling.polling_interval;
+  }
+  if (config.d_secPollSuffix == "secpoll.powerdns.com.") {
+    config.d_secPollSuffix = std::string(yamlConfig.security_polling.suffix);
+  }
+  if (config.d_verbose == false) {
+    config.d_verbose = yamlConfig.logging.verbose;
+  }
+  if (config.d_verboseHealthChecks == false) {
+    config.d_verboseHealthChecks = yamlConfig.logging.verbose_health_checks;
+  }
+  if (config.d_payloadSizeSelfGenAnswers == 1232) {
+    config.d_payloadSizeSelfGenAnswers = yamlConfig.general.edns_udp_payload_size_self_generated_answers;
+  }
+  if (config.d_addEDNSToSelfGeneratedResponses == true) {
+    config.d_addEDNSToSelfGeneratedResponses = yamlConfig.general.add_edns_to_self_generated_answers;
+  }
+  if (config.d_truncateTC == false) {
+    config.d_truncateTC = yamlConfig.general.truncate_tc_answers;
+  }
+  if (config.d_fixupCase == false) {
+    config.d_fixupCase = yamlConfig.general.fixup_case;
+  }
+  if (config.d_allowEmptyResponse == false) {
+    config.d_allowEmptyResponse = yamlConfig.general.allow_empty_responses;
+  }
+  if (config.d_dropEmptyQueries == false) {
+    config.d_dropEmptyQueries = yamlConfig.general.drop_empty_queries;
+  }
+  if (config.d_proxyProtocolMaximumSize == 512) {
+    config.d_proxyProtocolMaximumSize = yamlConfig.proxy_protocol.maximum_payload_size;
+  }
+  if (config.d_applyACLToProxiedClients == false) {
+    config.d_applyACLToProxiedClients = yamlConfig.proxy_protocol.apply_acl_to_proxied_clients;
+  }
+  if (config.d_servFailOnNoPolicy == false) {
+    config.d_servFailOnNoPolicy = yamlConfig.load_balancing_policies.servfail_on_no_server;
+  }
+  if (config.d_roundrobinFailOnNoServer == false) {
+    config.d_roundrobinFailOnNoServer = yamlConfig.load_balancing_policies.round_robin_servfail_on_no_server;
+  }
+}
+void convertImmutableFlatSettingsFromRust(const dnsdist::rust::settings::GlobalConfiguration& yamlConfig, dnsdist::configuration::ImmutableConfiguration& config)
+{
+  if (config.d_consoleMaxConcurrentConnections == 0) {
+    config.d_consoleMaxConcurrentConnections = yamlConfig.console.max_concurrent_connections;
+  }
+  if (config.d_ringsCapacity == 10000) {
+    config.d_ringsCapacity = yamlConfig.ring_buffers.size;
+  }
+  if (config.d_ringsNumberOfShards == 10) {
+    config.d_ringsNumberOfShards = yamlConfig.ring_buffers.shards;
+  }
+  if (config.d_ringsNbLockTries == 5) {
+    config.d_ringsNbLockTries = yamlConfig.ring_buffers.lock_retries;
+  }
+  if (config.d_ringsRecordQueries == true) {
+    config.d_ringsRecordQueries = yamlConfig.ring_buffers.record_queries;
+  }
+  if (config.d_ringsRecordResponses == true) {
+    config.d_ringsRecordResponses = yamlConfig.ring_buffers.record_responses;
+  }
+  if (config.d_maxTCPClientThreads == 10) {
+    config.d_maxTCPClientThreads = yamlConfig.tuning.tcp.worker_threads;
+  }
+  if (config.d_maxTCPQueuedConnections == 10000) {
+    config.d_maxTCPQueuedConnections = yamlConfig.tuning.tcp.max_queued_connections;
+  }
+  if (config.d_tcpInternalPipeBufferSize == 1048576) {
+    config.d_tcpInternalPipeBufferSize = yamlConfig.tuning.tcp.internal_pipe_buffer_size;
+  }
+  if (config.d_outgoingTCPMaxIdleTime == 300) {
+    config.d_outgoingTCPMaxIdleTime = yamlConfig.tuning.tcp.outgoing_max_idle_time;
+  }
+  if (config.d_outgoingTCPCleanupInterval == 60) {
+    config.d_outgoingTCPCleanupInterval = yamlConfig.tuning.tcp.outgoing_cleanup_interval;
+  }
+  if (config.d_outgoingTCPMaxIdlePerBackend == 10) {
+    config.d_outgoingTCPMaxIdlePerBackend = yamlConfig.tuning.tcp.outgoing_max_idle_connection_per_backend;
+  }
+  if (config.d_maxTCPConnectionsPerClient == 0) {
+    config.d_maxTCPConnectionsPerClient = yamlConfig.tuning.tcp.max_connections_per_client;
+  }
+  if (config.d_tcpConnectionsOverloadThreshold == 90) {
+    config.d_tcpConnectionsOverloadThreshold = yamlConfig.tuning.tcp.connections_overload_threshold;
+  }
+  if (config.d_maxTCPConnectionsRatePerClient == 0) {
+    config.d_maxTCPConnectionsRatePerClient = yamlConfig.tuning.tcp.max_connection_rate_per_client;
+  }
+  if (config.d_tcpConnectionsRatePerClientInterval == 5) {
+    config.d_tcpConnectionsRatePerClientInterval = yamlConfig.tuning.tcp.connection_rate_interval;
+  }
+  if (config.d_maxTLSNewSessionsRatePerClient == 0) {
+    config.d_maxTLSNewSessionsRatePerClient = yamlConfig.tuning.tcp.max_tls_new_session_rate_per_client;
+  }
+  if (config.d_maxTLSResumedSessionsRatePerClient == 0) {
+    config.d_maxTLSResumedSessionsRatePerClient = yamlConfig.tuning.tcp.max_tls_resumed_session_rate_per_client;
+  }
+  if (config.d_maxTCPReadIOsPerQuery == 50) {
+    config.d_maxTCPReadIOsPerQuery = yamlConfig.tuning.tcp.max_read_ios_per_query;
+  }
+  if (config.d_tcpBanDurationForExceedingMaxReadIOsPerQuery == 60) {
+    config.d_tcpBanDurationForExceedingMaxReadIOsPerQuery = yamlConfig.tuning.tcp.ban_duration_for_exceeding_max_read_ios_per_query;
+  }
+  if (config.d_tcpBanDurationForExceedingTCPTLSRate == 10) {
+    config.d_tcpBanDurationForExceedingTCPTLSRate = yamlConfig.tuning.tcp.ban_duration_for_exceeding_tcp_tls_rate;
+  }
+  if (config.d_tcpConnectionsMaskV4 == 32) {
+    config.d_tcpConnectionsMaskV4 = yamlConfig.tuning.tcp.connections_mask_v4;
+  }
+  if (config.d_tcpConnectionsMaskV6 == 128) {
+    config.d_tcpConnectionsMaskV6 = yamlConfig.tuning.tcp.connections_mask_v6;
+  }
+  if (config.d_tcpConnectionsMaskV4Port == 0) {
+    config.d_tcpConnectionsMaskV4Port = yamlConfig.tuning.tcp.connections_mask_v4_port;
+  }
+  if (config.d_udpVectorSize == 1) {
+    config.d_udpVectorSize = yamlConfig.tuning.udp.messages_per_round;
+  }
+  if (config.d_socketUDPSendBuffer == 0) {
+    config.d_socketUDPSendBuffer = yamlConfig.tuning.udp.send_buffer_size;
+  }
+  if (config.d_socketUDPRecvBuffer == 0) {
+    config.d_socketUDPRecvBuffer = yamlConfig.tuning.udp.receive_buffer_size;
+  }
+  if (config.d_maxUDPOutstanding == 65535) {
+    config.d_maxUDPOutstanding = yamlConfig.tuning.udp.max_outstanding_per_backend;
+  }
+  if (config.d_udpTimeout == 2) {
+    config.d_udpTimeout = yamlConfig.tuning.udp.timeout;
+  }
+  if (config.d_randomizeUDPSocketsToBackend == false) {
+    config.d_randomizeUDPSocketsToBackend = yamlConfig.tuning.udp.randomize_outgoing_sockets_to_backend;
+  }
+  if (config.d_randomizeIDsToBackend == false) {
+    config.d_randomizeIDsToBackend = yamlConfig.tuning.udp.randomize_ids_to_backend;
+  }
+  if (config.d_outgoingDoHWorkers == 10) {
+    config.d_outgoingDoHWorkers = yamlConfig.tuning.doh.outgoing_worker_threads;
+  }
+  if (config.d_outgoingDoHMaxIdleTime == 300) {
+    config.d_outgoingDoHMaxIdleTime = yamlConfig.tuning.doh.outgoing_max_idle_time;
+  }
+  if (config.d_outgoingDoHCleanupInterval == 60) {
+    config.d_outgoingDoHCleanupInterval = yamlConfig.tuning.doh.outgoing_cleanup_interval;
+  }
+  if (config.d_outgoingDoHMaxIdlePerBackend == 10) {
+    config.d_outgoingDoHMaxIdlePerBackend = yamlConfig.tuning.doh.outgoing_max_idle_connection_per_backend;
+  }
+  if (config.d_snmpEnabled == false) {
+    config.d_snmpEnabled = yamlConfig.snmp.enabled;
+  }
+  if (config.d_snmpTrapsEnabled == false) {
+    config.d_snmpTrapsEnabled = yamlConfig.snmp.traps_enabled;
+  }
+  if (config.d_snmpDaemonSocketPath == "") {
+    config.d_snmpDaemonSocketPath = std::string(yamlConfig.snmp.daemon_socket);
+  }
+  if (config.d_weightedBalancingFactor == 0.0) {
+    config.d_weightedBalancingFactor = yamlConfig.load_balancing_policies.weighted_balancing_factor;
+  }
+  if (config.d_consistentHashBalancingFactor == 0.0) {
+    config.d_consistentHashBalancingFactor = yamlConfig.load_balancing_policies.consistent_hashing_balancing_factor;
+  }
+  if (config.d_hashPerturbation == 0) {
+    config.d_hashPerturbation = yamlConfig.load_balancing_policies.hash_perturbation;
+  }
+}
+
+}
+#endif /* defined(HAVE_YAML_CONFIGURATION) */
